Wymagania funkcjonalne:
1. Python + Pyside6 + Sqlite3 + Qt Designer
2. Styl modern ui ze zmiana dynamiczną wyglądu poprzez wybór przez użytkownika i zaczytanie pliku themes. wybór w dalszym etapie będzie zapisywany do bazy danych per uzytkownik, chyba ze inne rozwiazanie jest preferowane 
3. Po uruchomieniu ma się pojawić okno logowania i po poprawnym wpisaniu danych przejść do głównego okna 
4. Struktura wyglądu okna jest w plikach ui i zaczytywana przez kod umieszczony w folderze views a ten w main.py 
5. Odzielamy warstwę logiki od wygladu i danych. Ikony nie bedą zaczytywane prez Qt Designer i plik resources
7. Aplikacja będzie pod Windows 10 bez górnej belki ale wygladem ma przypominać aplikacje CClener ( lewa belka) 
8. Szyfrowanie bazy danych poprzez SQLCipher (baza), zashaszowanie głownego hasła(cryptography ), bcrypt (hashowanie hasła użytkowników), 
9. Własny ramka aplikacji opcja Qt.FramelessWindowHint ale z zachowaniem wszystkich opcji, które umożliwia domślnie system w tym zakresie, m.in
 - Przycisków systemowych 
 - chwytanie myszką na pasek i okna go po pulpici, zmiana pozycji
 - Przesuwając okno do krawędzi system domyślnie ustawia je do krawędzi
 - Cieniowanie całego okna
 - Przy maksmymalizacji okna powinno ono być idealnie ustawione do krawędzi 
 - Mozliowść minimalizacji okna i przy maksymnalzacji wraca do swojego poprzedniego stanu i pozycji  przed maksymalizacją
 - Ruszajac szybko paskiem inne aplikacje się maksymalizaują
 - Skalowanie okna przycikiem krpek w prawym dolnym rogu 
 - podwójne kliencie powóduje maksymalizacje 
 - inne wbudowane 
10. Wczytywanie motywów z folderu themes i dynamiczna zmiana w głownym oknie aplikacji i combobox


11. To zadanie spełnione jest przez:
https://github.com/zhiyiYo/PyQt-Frameless-Window/tree/PySide6
pip install PySideSix-Frameless-Window

12. Gotowy kod dopoprawy 
https://github.com/kanios666/Mini_Biling_new/blob/main/app/views/main_window.py
https://github.com/kanios666/Mini_Biling_new/blob/main/app/controllers/main_controller_test.py
https://github.com/kanios666/Mini_Biling_new/blob/main/main_docelowy.py




Zaproponuj strukturę folderów/drzewa projektu oraz przykładowe nazwy plików bez listingu kodu pythona/
Opisz każdy z folderów aby było wiadomo za co odpowiada 

my_project/
├── app/
│   ├── ui/
│   │   ├── main_window.ui
│   │   ├── clients.ui
│   │   ├── login.ui
│   │   └── ...
│   ├── views/
│   │   ├── main_window.py
│   │   ├── clients.py
│   │   ├── login.py
│   │   └── ...
│   ├── controllers/
│   │   ├── main_controller.py
│   │   ├── clients.py
│   │   ├── login_controller.py
│   │   └── ...
│   ├── models/
│   │   ├── user_model.py
│   │   ├── db_connection.py
│   │   ├── clients_model.py
│   │   ├── product_model.py
│   │   └── ...
│   ├── resources/
│   │   ├── icons/
│   │   │   ├── icon1.svg
│   │   │   └── icon2.svg
│   │   └── ...
│   └── themes/
│       ├── bright.json
│       ├── default.json
│       ├── dark.json
│       └── ...
├── database/
│   └── database.db
├── main.py
└── settings.json

==================================
Python & PySide6 & Qt Desinger
https://github.com/kanios666/Mini_Biling_new
Mam poważny problem ze zrobieniem okna logowania bez systemowego paska ( tam gdzie jest zamknij, minmalizuj)
Zdefiniowałem wygląd okna app\views\login_window.py na podstawie (app\ui\login_window.ui), który będzie zawierał przycisk zamknij i uchwyt do przenoszenia

Probowałem zmienić pakiet \app\controllers\qframelesswindow aby spełniał to zadanie być może już to jest zaimplementowne
1. Zdefiniowałem wygląd okna app\views\login_window.py
2. Obsłguje go controllerem i tu chce zrobić dzieczycenie z qframelesswindow stylu bez górnego paska. 
3. Wczytuje za pomocą pliku main.py 

Potrzebuje propozycji jak do takiego tematu podchodzą profesionalni programiści 
Może moje podejście jest implementowane ze złej strony, może zmiana musi byc wielu plikach, zapronuj rozwiązanie.